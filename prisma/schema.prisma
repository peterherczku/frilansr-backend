// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Listing {
  id           String        @id @default(cuid())
  title        String?
  description  String?
  type         JobType?
  duration     Int?
  date         DateTime?
  latitude     Float?
  longitude    Float?
  salary       Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  image        String?
  status       ListingStatus @default(DRAFT)
  applications Application[]

  job Job?
}

model Job {
  id           String         @id @default(cuid())
  listing      Listing        @relation(fields: [listingId], references: [id])
  listingId    String         @unique
  workerId     String
  status       JobStatus      @default(WAITING_FOR_WORKER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Conversation Conversation[]
  transaction  Transaction?   @relation("JobTransaction")
}

model Application {
  id        String            @id @default(cuid())
  listing   Listing           @relation(fields: [listingId], references: [id])
  listingId String
  userId    String
  message   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    ApplicationStatus @default(PENDING)
}

model Conversation {
  id        String   @id @default(uuid())
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastMessageId String?  @unique
  lastMessage   Message? @relation("LastMessage", fields: [lastMessageId], references: [id])

  messages     Message[]                 @relation("ConversationMessages")
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  userId         String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastSeenAt     DateTime?    @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id       String   @id @default(uuid())
  content  String
  sentAt   DateTime @default(now())
  senderId String

  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  conversationId String

  conversationAsLast Conversation? @relation("LastMessage")
}

model StripeAccount {
  id               String  @id @default(cuid())
  userId           String  @unique
  stripeCustomerId String? @unique
  stripeAccountId  String? @unique
}

model Transaction {
  id                    String            @id @default(cuid())
  workerId              String
  listerId              String
  jobId                 String            @unique
  job                   Job               @relation("JobTransaction", fields: [jobId], references: [id])
  stripePaymentIntentId String            @unique
  stripeTransferId      String?           @unique
  status                TransactionStatus @default(ON_WAY_TO_FRILASNSR)

  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobType {
  DOG_WALKING
}

enum JobStatus {
  WAITING_FOR_WORKER
  IN_PROGRESS
  COMPLETED
}

enum ListingStatus {
  DRAFT
  PUBLISHED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TransactionStatus {
  ON_WAY_TO_FRILASNSR
  ARRIVED_AT_FRILANSR
  ON_WAY_TO_DESTINATION
  ARRIVED_AT_DESTINATION
}
